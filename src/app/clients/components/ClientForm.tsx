"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useAppDispatch } from "@/store/hooks";
import { addClient } from "@/store/clientsSlice";
import type { Client } from "@/models/client";


interface FormProps {
  onSubmit: () => void;
  onCancel: () => void;
}

export default function ClientForm({ onSubmit, onCancel }: FormProps) {
  const dispatch = useAppDispatch();
  const router = useRouter();

  // Local state for form data (no id, it will be auto-generated by Redux)
  const [formData, setFormData] = useState<Omit<Client, "id">>({
    name: "",
    email: "",
    status: "active",
    productIds: [],
  });

  const [touched, setTouched] = useState({
    name: false,
    email: false,
  });


  // --- VALIDATORS ---
  const validate = {
    name: (value: string) => {
      if (!value.trim()) { return "Name is required"; }
      if (/\d/.test(value)) { return "Must not contain numbers"; }
      return null;
    },
    email: (value: string) => {
      if (!value.trim()) { return "Email is required"; }
      return null;
    },
  };

  // --- ERRORS ---
  const errors = {
    name: validate.name(formData.name),
    email: validate.email(formData.email),
  };

  const isFormValid = Object.values(errors).every((error) => error === null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!isFormValid) return;
    dispatch(addClient(formData));
    onSubmit();
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-4"
    >
      {/* Name */}
      <div>
        <input
          name="name"
          value={formData.name}
        onChange={(e) => {
          setFormData({ ...formData, name: e.target.value });
          setTouched({ ...touched, name: true });
        }}
          placeholder="Name"
          className="w-full border rounded-2xl px-3 py-2"
        />
        {touched.name && errors.name && (
          <p className="text-red-500 text-sm">{errors.name}</p>
        )}
      </div>

      {/* Email */}
      <div>
        <input
          name="email"
          value={formData.email}
          onChange={(e) => {
            setFormData({ ...formData, email: e.target.value });
            setTouched({ ...touched, email: true });
          }}
          placeholder="Email"
          className="w-full border rounded-2xl px-3 py-2"
        />
        {touched.email && errors.email && (
          <p className="text-red-500 text-sm">{errors.email}</p>
        )}
      </div>

      {/* Status */}
      <div className="flex items-center gap-2">
        <input
          type="checkbox"
          id="status"
          checked={formData.status === "active"}
          onChange={(e) =>
            setFormData({ ...formData, status: e.target.checked ? "active" : "inactive" })
          }
        />
        <label htmlFor="status">Active</label>
      </div>

      {/* Buttons */}
      <div className="space-x-2 w-full flex justify-end">
        <button
          type="button"
          onClick={() =>
            onCancel()
          }
          className="px-4 py-2 bg-gray-600 text-white rounded-2xl hover:bg-gray-700"
        >
          Cancel
        </button>

        <button
          type="submit"
          disabled={!isFormValid}
          className={`px-4 py-2 rounded-2xl text-white ${isFormValid
            ? "bg-blue-600 hover:bg-blue-700"
            : "bg-blue-300"
            }`}
        >
          Save
        </button>
      </div>
    </form>
  );
}
